=======================
  7-base_geometry.txt
=======================

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("int", 12)

    >>> bg.integer_validator("name", "John")
    Traceback (most recent call last):
    TypeError: name must be an integer

    >>> bg.integer_validator("float", 2.65)
    Traceback (most recent call last):
    TypeError: float must be an integer

    >>> bg.integer_validator("onlyone")
    Traceback (most recent call last):
    TypeError: integer_validator() missing 1 required positional argument: 'value'

    >>> bg.integer_validator("", 18)

    >>> bg.integer_validator("negative", -89)
    Traceback (most recent call last):
    ValueError: negative must be greater than 0

    >>> bg.integer_validator("zero", 0)
    Traceback (most recent call last):
    ValueError: zero must be greater than 0

    >>> bg.integer_validator("test", {1, 2})
    Traceback (most recent call last):
    TypeError: test must be an integer

    >>> bg.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

    >>> bg.area()
    Traceback (most recent call last):
    Exception: area() is not implemented

    >>> bg.integer_validator("true", True)
    Traceback (most recent call last):
    TypeError: true must be an integer
    
    >>> bg.integer_validator("tuple", (1, 2))
    Traceback (most recent call last):
    TypeError: tuple must be an integer

    >>> bg.integer_validator("None", None)
    Traceback (most recent call last):
    TypeError: None must be an integer

    >>> bg.integer_validator("List", [5, 4])
    Traceback (most recent call last):
    TypeError: List must be an integer
