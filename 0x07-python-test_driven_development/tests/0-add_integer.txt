=======================
     0-add_integer
=======================

This library is very simple, since it only has one function called
``my_function()``.

Numbers
=======

``my_function()`` returns the product of its arguments.  For numbers,
that value is equivalent to using the ``*`` operator.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(2, 3)
    5

It also works with floating-point values.

::

    >>> add_integer(3.1, 3)
    6

Non-Numbers
===========

Because ``*`` is also defined on data types other than numbers,
``my_function()`` works just as well if one of the arguments is a
string, a list, or a tuple.

::

    >>> add_integer('a', 'b')
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(2, ['A', 'B', 'C'])
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer(2, -4)
    -2
    
    >>> add_integer()
    Traceback (most recent call last):
    TypeError: add_integer() missing 1 required positional argument: 'a'
